import random
import sqlite3
from sqlite3 import Error

import pandas as pd
import streamlit as st

# Configuration de la page
st.set_page_config(page_title="SQL R√©vision App", layout="wide")


# Fonction pour cr√©er une connexion √† une base de donn√©es SQLite en m√©moire
def create_connection():
    conn = None
    try:
        conn = sqlite3.connect(":memory:")
        return conn
    except Error as e:
        st.error(f"Erreur de connexion SQLite: {e}")

    return conn


# Initialisation de la base de donn√©es avec des donn√©es d'exemple
def init_database(conn):
    # Cr√©ation des tables
    cursor = conn.cursor()

    # Table des employ√©s
    cursor.execute(
        """
    CREATE TABLE IF NOT EXISTS employees (
        id INTEGER PRIMARY KEY,
        name TEXT NOT NULL,
        age INTEGER,
        department TEXT,
        salary REAL
    )
    """
    )

    # Table des d√©partements
    cursor.execute(
        """
    CREATE TABLE IF NOT EXISTS departments (
        id INTEGER PRIMARY KEY,
        name TEXT NOT NULL,
        manager_id INTEGER,
        budget REAL,
        FOREIGN KEY (manager_id) REFERENCES employees (id)
    )
    """
    )

    # Insertion de donn√©es d'exemple
    cursor.execute(
        """
    INSERT INTO employees (id, name, age, department, salary)
    VALUES 
        (1, 'Jean Dupont', 35, 'IT', 55000),
        (2, 'Marie Lefebvre', 42, 'Marketing', 62000),
        (3, 'Pierre Martin', 28, 'IT', 48000),
        (4, 'Sophie Bernard', 31, 'RH', 51000),
        (5, 'Thomas Dubois', 45, 'Finance', 75000)
    """
    )

    cursor.execute(
        """
    INSERT INTO departments (id, name, manager_id, budget)
    VALUES 
        (1, 'IT', 1, 500000),
        (2, 'Marketing', 2, 350000),
        (3, 'RH', 4, 200000),
        (4, 'Finance', 5, 750000)
    """
    )

    conn.commit()


# Questions pour le quiz SQL
quiz_questions = [
    {
        "question": "Quelle commande SQL est utilis√©e pour r√©cup√©rer des donn√©es d'une table?",
        "options": ["SELECT", "UPDATE", "DELETE", "INSERT"],
        "correct": "SELECT",
    },
    {
        "question": "Comment joindre deux tables en SQL?",
        "options": ["MERGE", "COMBINE", "JOIN", "CONNECT"],
        "correct": "JOIN",
    },
    {
        "question": "Quelle clause est utilis√©e pour filtrer les r√©sultats d'une requ√™te SQL?",
        "options": ["FILTER", "HAVING", "GROUP", "WHERE"],
        "correct": "WHERE",
    },
    {
        "question": "Comment trier les r√©sultats d'une requ√™te SQL par ordre croissant?",
        "options": ["SORT BY", "ORDER BY ... ASC", "ORDER ASC", "ARRANGE BY"],
        "correct": "ORDER BY ... ASC",
    },
    {
        "question": "Quelle fonction SQL est utilis√©e pour compter le nombre d'enregistrements?",
        "options": ["SUM()", "COUNT()", "TOTAL()", "NUM()"],
        "correct": "COUNT()",
    },
]


def main():
    st.title("Application de R√©vision SQL")

    # Barre lat√©rale pour la navigation
    menu = st.sidebar.selectbox(
        "Navigation",
        [
            "Accueil",
            "Quiz SQL",
            "Testeur de Requ√™tes",
            "Sch√©mas de Base de Donn√©es",
            "Exercices Pratiques",
        ],
    )

    # Connexion √† la base de donn√©es
    conn = create_connection()

    if conn is not None:
        init_database(conn)

        if menu == "Accueil":
            show_home()
        elif menu == "Quiz SQL":
            show_quiz()
        elif menu == "Testeur de Requ√™tes":
            show_query_tester(conn)
        elif menu == "Sch√©mas de Base de Donn√©es":
            show_schemas(conn)
        elif menu == "Exercices Pratiques":
            show_exercises(conn)

        conn.close()
    else:
        st.error("Erreur lors de la connexion √† la base de donn√©es.")


def show_home():
    st.header("Bienvenue dans l'application de r√©vision SQL!")

    st.write(
        """
    Cette application est con√ßue pour vous aider √† r√©viser et √† pratiquer vos comp√©tences en SQL.

    ### Fonctionnalit√©s disponibles:

    - **Quiz SQL**: Testez vos connaissances en SQL avec des questions √† choix multiples
    - **Testeur de Requ√™tes**: √âcrivez et ex√©cutez des requ√™tes SQL sur des bases de donn√©es d'exemple
    - **Sch√©mas de Base de Donn√©es**: Explorez les structures de base de donn√©es disponibles
    - **Exercices Pratiques**: R√©solvez des probl√®mes SQL pratiques et v√©rifiez vos solutions

    Utilisez la barre lat√©rale pour naviguer entre les diff√©rentes sections.
    """
    )

    st.info(
        "üí° Conseil: SQL (Structured Query Language) est un langage standard pour la gestion des bases de donn√©es relationnelles."
    )


def show_quiz():
    st.header("Quiz SQL")

    st.write("Testez vos connaissances SQL avec ce quiz √† choix multiples!")

    if "quiz_score" not in st.session_state:
        st.session_state.quiz_score = 0
        st.session_state.questions_answered = 0
        st.session_state.current_question = 0
        st.session_state.questions = random.sample(quiz_questions, len(quiz_questions))
        st.session_state.submitted = False

    if st.session_state.questions_answered < len(st.session_state.questions):
        current_q = st.session_state.questions[st.session_state.current_question]

        st.subheader(
            f"Question {st.session_state.current_question + 1} sur {len(st.session_state.questions)}"
        )
        st.write(current_q["question"])

        user_answer = st.radio(
            "S√©lectionnez votre r√©ponse:",
            current_q["options"],
            key=f"q_{st.session_state.current_question}",
        )

        if st.session_state.submitted:
            if st.session_state.current_question < len(st.session_state.questions) - 1:
                if st.button("Question suivante"):
                    st.session_state.current_question += 1
                    st.session_state.submitted = False
                    st.rerun()
        else:
            if st.button("Soumettre"):
                st.session_state.submitted = True
                if user_answer == current_q["correct"]:
                    st.session_state.quiz_score += 1
                    st.success("Correct! ‚úÖ")
                else:
                    st.error(
                        f"Incorrect! La bonne r√©ponse est: {current_q['correct']} ‚ùå"
                    )

                st.session_state.questions_answered += 1

                # Ne pas red√©marrer apr√®s la derni√®re question
                if st.session_state.questions_answered < len(
                    st.session_state.questions
                ):
                    st.rerun()

    else:
        st.success(
            f"Quiz termin√©! Votre score est de {st.session_state.quiz_score}/{len(st.session_state.questions)}"
        )

        # Afficher une √©valuation bas√©e sur le score
        score_percentage = (
            st.session_state.quiz_score / len(st.session_state.questions) * 100
        )

        if score_percentage >= 80:
            st.balloons()
            st.write("Excellent travail! üéâ Vos connaissances SQL sont solides!")
        elif score_percentage >= 60:
            st.write(
                "Bon travail! Continuez √† pratiquer pour am√©liorer vos comp√©tences SQL."
            )
        else:
            st.write(
                "Continuez √† apprendre et √† pratiquer. Les bases de donn√©es SQL demandent de la pratique!"
            )

        if st.button("Recommencer le quiz"):
            st.session_state.quiz_score = 0
            st.session_state.questions_answered = 0
            st.session_state.current_question = 0
            st.session_state.questions = random.sample(
                quiz_questions, len(quiz_questions)
            )
            st.session_state.submitted = False
            st.rerun()


def show_query_tester(conn):
    st.header("Testeur de Requ√™tes SQL")

    st.write(
        """
    √âcrivez vos requ√™tes SQL et ex√©cutez-les sur notre base de donn√©es d'exemple.
    La base de donn√©es contient les tables 'employees' et 'departments'.
    """
    )

    # Afficher le sch√©ma de la base de donn√©es
    with st.expander("Voir le sch√©ma de la base de donn√©es"):
        st.code(
            """
        -- Table 'employees'
        CREATE TABLE employees (
            id INTEGER PRIMARY KEY,
            name TEXT NOT NULL,
            age INTEGER,
            department TEXT,
            salary REAL
        );

        -- Table 'departments'
        CREATE TABLE departments (
            id INTEGER PRIMARY KEY,
            name TEXT NOT NULL,
            manager_id INTEGER,
            budget REAL,
            FOREIGN KEY (manager_id) REFERENCES employees (id)
        );
        """
        )

    # Zone de saisie pour la requ√™te SQL
    query = st.text_area(
        "√âcrivez votre requ√™te SQL ici:", height=150, value="SELECT * FROM employees;"
    )

    # Ex√©cution de la requ√™te
    if st.button("Ex√©cuter la requ√™te"):
        try:
            cursor = conn.cursor()
            cursor.execute(query)
            results = cursor.fetchall()

            # R√©cup√©rer les noms de colonnes
            column_names = [description[0] for description in cursor.description]

            # Convertir les r√©sultats en DataFrame pandas
            df = pd.DataFrame(results, columns=column_names)

            # Afficher les r√©sultats
            st.subheader("R√©sultats:")
            st.dataframe(df)

            # Afficher le nombre de lignes retourn√©es
            st.info(f"La requ√™te a retourn√© {len(df)} enregistrement(s).")

        except Exception as e:
            st.error(f"Erreur d'ex√©cution de la requ√™te: {e}")

    # Exemples de requ√™tes
    with st.expander("Exemples de requ√™tes"):
        st.code("SELECT * FROM employees WHERE department = 'IT';")
        st.code(
            "SELECT e.name, d.name as department_name FROM employees e JOIN departments d ON e.department = d.name;"
        )
        st.code(
            "SELECT department, AVG(salary) as avg_salary FROM employees GROUP BY department;"
        )


def show_schemas(conn):
    st.header("Sch√©mas de Base de Donn√©es")

    st.write(
        """
    Explorez les sch√©mas de base de donn√©es disponibles pour comprendre la structure des donn√©es.
    """
    )

    # S√©lection du sch√©ma √† afficher
    schema_type = st.selectbox(
        "S√©lectionnez un sch√©ma:",
        ["Employ√©s & D√©partements", "Commerce en ligne", "Biblioth√®que"],
    )

    if schema_type == "Employ√©s & D√©partements":
        st.subheader("Sch√©ma Employ√©s & D√©partements")

        # Description du sch√©ma
        st.write(
            """
        Ce sch√©ma repr√©sente une structure simple pour la gestion des employ√©s et des d√©partements d'une entreprise.
        """
        )

        # Afficher le sch√©ma sous forme de diagramme
        st.code(
            """
        +---------------+       +---------------+
        | employees     |       | departments   |
        +---------------+       +---------------+
        | id (PK)       |       | id (PK)       |
        | name          |       | name          |
        | age           |       | manager_id (FK)|
        | department    |       | budget        |
        | salary        |       |               |
        +---------------+       +---------------+
                                        |
                                        |
        +---------------+               |
        | relation      |---------------+
        +---------------+
        | Un d√©partement a un manager qui est un employ√© |
        | Un employ√© appartient √† un d√©partement         |
        +-------------------------------------------+
        """
        )

        # Afficher les donn√©es d'exemple
        st.subheader("Donn√©es d'exemple:")

        tab1, tab2 = st.tabs(["Table 'employees'", "Table 'departments'"])

        with tab1:
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM employees")
            results = cursor.fetchall()
            column_names = [description[0] for description in cursor.description]
            df = pd.DataFrame(results, columns=column_names)
            st.dataframe(df)

        with tab2:
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM departments")
            results = cursor.fetchall()
            column_names = [description[0] for description in cursor.description]
            df = pd.DataFrame(results, columns=column_names)
            st.dataframe(df)

    elif schema_type == "Commerce en ligne":
        st.subheader("Sch√©ma Commerce en ligne")

        st.write(
            """
        Ce sch√©ma repr√©sente une structure typique pour une application de commerce en ligne.
        (Les donn√©es ne sont pas charg√©es dans la base de donn√©es actuelle, ceci est juste un exemple conceptuel.)
        """
        )

        st.code(
            """
        +---------------+      +---------------+      +----------------+
        | customers     |      | orders        |      | products       |
        +---------------+      +---------------+      +----------------+
        | id (PK)       |      | id (PK)       |      | id (PK)        |
        | name          |      | customer_id (FK)     | name           |
        | email         |      | order_date    |      | description    |
        | address       |      | total_amount  |      | price          |
        | phone         |      | status        |      | category       |
        +---------------+      +---------------+      +----------------+
              |                      |                       |
              |                      |                       |
              |                      |                       |
              |                +----------------+            |
              +----------------|  order_items   |------------+
                               +----------------+
                               | order_id (FK)  |
                               | product_id (FK)|
                               | quantity       |
                               | unit_price     |
                               +----------------+
        """
        )

    elif schema_type == "Biblioth√®que":
        st.subheader("Sch√©ma Biblioth√®que")

        st.write(
            """
        Ce sch√©ma repr√©sente une structure pour la gestion d'une biblioth√®que.
        (Les donn√©es ne sont pas charg√©es dans la base de donn√©es actuelle, ceci est juste un exemple conceptuel.)
        """
        )

        st.code(
            """
        +---------------+      +----------------+      +---------------+
        | books         |      | loans          |      | members       |
        +---------------+      +----------------+      +---------------+
        | id (PK)       |      | id (PK)        |      | id (PK)       |
        | title         |      | book_id (FK)   |      | name          |
        | author        |      | member_id (FK) |      | email         |
        | isbn          |      | loan_date      |      | address       |
        | category      |      | return_date    |      | join_date     |
        | publish_year  |      | returned       |      | status        |
        +---------------+      +----------------+      +---------------+
              |                      |                       |
              |                      |                       |
              +-----------------------+-----------------------+
        """
        )


def show_exercises(conn):
    st.header("Exercices Pratiques SQL")

    st.write(
        """
    Pratiquez vos comp√©tences SQL en r√©solvant des exercices de difficult√© vari√©e.
    Chaque exercice comprend une description du probl√®me et une zone pour √©crire votre solution.
    """
    )

    # S√©lection du niveau de difficult√©
    difficulty = st.selectbox(
        "S√©lectionnez un niveau de difficult√©:", ["D√©butant", "Interm√©diaire", "Avanc√©"]
    )

    # Exercices par niveau de difficult√© avec les colonnes attendues
    exercises = {
        "D√©butant": [
            {
                "title": "S√©lection de base",
                "description": "√âcrivez une requ√™te pour s√©lectionner tous les employ√©s du d√©partement IT.",
                "expected": "SELECT * FROM employees WHERE department = 'IT';",
                "hint": "Utilisez la clause WHERE pour filtrer les r√©sultats.",
                "expected_columns": "id, name, age, department, salary",
            },
            {
                "title": "Calcul d'agr√©gation",
                "description": "Calculez le salaire moyen des employ√©s.",
                "expected": "SELECT AVG(salary) as average_salary FROM employees;",
                "hint": "Utilisez la fonction AVG() pour calculer la moyenne.",
                "expected_columns": "average_salary",
            },
        ],
        "Interm√©diaire": [
            {
                "title": "Jointure de tables",
                "description": "Affichez le nom de chaque employ√© avec le nom de son d√©partement et le budget du d√©partement.",
                "expected": "SELECT e.name as employee_name, d.name as department_name, d.budget FROM employees e JOIN departments d ON e.department = d.name;",
                "hint": "Utilisez JOIN pour combiner les donn√©es des deux tables.",
                "expected_columns": "employee_name, department_name, budget",
            },
            {
                "title": "Groupement et agr√©gation",
                "description": "Affichez le salaire moyen par d√©partement, tri√©s du plus √©lev√© au plus bas.",
                "expected": "SELECT department, AVG(salary) as avg_salary FROM employees GROUP BY department ORDER BY avg_salary DESC;",
                "hint": "Utilisez GROUP BY pour regrouper les r√©sultats et ORDER BY pour les trier.",
                "expected_columns": "department, avg_salary",
            },
        ],
        "Avanc√©": [
            {
                "title": "Sous-requ√™tes",
                "description": "Trouvez les employ√©s qui gagnent plus que la moyenne des salaires de leur d√©partement.",
                "expected": "SELECT e1.name, e1.salary, e1.department FROM employees e1 WHERE e1.salary > (SELECT AVG(e2.salary) FROM employees e2 WHERE e2.department = e1.department);",
                "hint": "Utilisez une sous-requ√™te pour calculer la moyenne par d√©partement.",
                "expected_columns": "name, salary, department",
            },
            {
                "title": "Fonctions de fen√™trage",
                "description": "Affichez chaque employ√© avec son classement de salaire dans son d√©partement (du plus √©lev√© au plus bas).",
                "expected": "SELECT name, department, salary, RANK() OVER (PARTITION BY department ORDER BY salary DESC) as salary_rank FROM employees;",
                "hint": "Utilisez les fonctions de fen√™trage (RANK, PARTITION BY) pour cr√©er des classements.",
                "expected_columns": "name, department, salary, salary_rank",
            },
        ],
    }

    # S√©lection de l'exercice
    selected_exercises = exercises[difficulty]
    exercise_titles = [ex["title"] for ex in selected_exercises]
    selected_exercise_title = st.selectbox("S√©lectionnez un exercice:", exercise_titles)

    # Trouver l'exercice s√©lectionn√©
    exercise = next(
        (ex for ex in selected_exercises if ex["title"] == selected_exercise_title),
        None,
    )

    if exercise:
        st.subheader(exercise["title"])
        st.write(exercise["description"])

        # Afficher les colonnes attendues
        st.info(f"Colonnes attendues dans le r√©sultat: {exercise['expected_columns']}")

        # Afficher le sch√©ma pour r√©f√©rence
        with st.expander("Voir le sch√©ma de la base de donn√©es"):
            st.code(
                """
            -- Table 'employees'
            CREATE TABLE employees (
                id INTEGER PRIMARY KEY,
                name TEXT NOT NULL,
                age INTEGER,
                department TEXT,
                salary REAL
            );

            -- Table 'departments'
            CREATE TABLE departments (
                id INTEGER PRIMARY KEY,
                name TEXT NOT NULL,
                manager_id INTEGER,
                budget REAL,
                FOREIGN KEY (manager_id) REFERENCES employees (id)
            );
            """
            )

        # Zone de saisie pour la solution
        user_solution = st.text_area("Votre solution SQL:", height=100)

        # V√©rification de la solution
        if st.button("V√©rifier la solution"):
            if user_solution.strip():
                try:
                    # Ex√©cuter la requ√™te de l'utilisateur
                    cursor = conn.cursor()
                    cursor.execute(user_solution)
                    user_results = cursor.fetchall()
                    user_column_names = [
                        description[0] for description in cursor.description
                    ]

                    # Ex√©cuter la requ√™te attendue
                    cursor.execute(exercise["expected"])
                    expected_results = cursor.fetchall()
                    expected_column_names = [
                        description[0] for description in cursor.description
                    ]

                    # Afficher les r√©sultats de l'utilisateur
                    st.subheader("Votre r√©sultat:")
                    user_df = pd.DataFrame(user_results, columns=user_column_names)
                    st.dataframe(user_df)

                    # V√©rifier si les r√©sultats correspondent
                    results_match = (
                        user_results == expected_results
                        and user_column_names == expected_column_names
                    )

                    if results_match:
                        st.success("F√©licitations! Votre solution est correcte! üéâ")
                    else:
                        st.warning(
                            "Votre solution ne correspond pas exactement au r√©sultat attendu. Continuez d'essayer!"
                        )

                        # Afficher un indice
                        if st.button("Afficher un indice"):
                            st.info(f"Indice: {exercise['hint']}")

                        # Option pour voir la solution
                        if st.button("Voir la solution"):
                            st.code(exercise["expected"])

                except Exception as e:
                    st.error(f"Erreur d'ex√©cution de la requ√™te: {e}")
            else:
                st.warning("Veuillez saisir une solution avant de v√©rifier.")


if __name__ == "__main__":
    main()


ldldldl